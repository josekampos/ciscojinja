#jinja2: lstrip_blocks: True
!
{% include './ios_static/1-log-service.j2' %}
!
!
hostname {{ device.json.results[0]['name'] }}
!
!
boot-start-marker
boot-end-marker
!
!
vrf definition Mgmt-intf
 !
 address-family ipv4
 exit-address-family
 !
 address-family ipv6
 exit-address-family
!
!
{#% include './ios_static/2-aaa_clock.j2' %i#}
!
!
!
{% for vrf in vrfs.json.results %}
ip vrf {{ vrf.name }}
 description {{ vrf.description }}
 rd {{ vrf.rd }}
{% for export_target in vrf.export_targets %}
 route-target export  {{ export_target['name'] }}
{% endfor %}
{% for import_target in vrf.import_targets %}
 route-target import  {{ import_target['name'] }}
{% endfor %}
!
{% endfor %}
!
!
no ip bootp server
!
spanning-tree extend system-id
!
redundancy
 mode none
!
!
lldp run
!
!
!
{% for intf in interfaces.json.results %}
{% if 'Loop' in intf["name"] %}
interface {{ intf.name }}
  {% if intf.description %}
  description {{ intf.description }}
  {% endif %}
  {% if intf.vrf %}
  ip vrf forwarding {{ intf.vrf['name'] }}
  {% endif %}
    {% for ip in ip_addresses.json.results %}
      {% if ip.assigned_object.name == intf.name %}
  ip address {{ ip.address.split('/')[0] }} {{ ip.address | ansible.utils.ipaddr('netmask') }}
      {% endif %}
    {% endfor %}
  no shutdown
{% endif %}
{% endfor %}
!
!
{% for intf in interfaces.json.results %}
{% if 'BDI' in intf["name"] %}
interface {{ intf.name }}
  {% if intf.description %}
  description {{ intf.description }}
  {% endif %}
  {% if intf.vrf %}
  ip vrf forwarding {{ intf.vrf['name'] }}
  {% endif %}
    {% for ip in ip_addresses.json.results %}
      {% if ip.assigned_object.name == intf.name %}
  ip address {{ ip.address.split('/')[0] }} {{ ip.address | ansible.utils.ipaddr('netmask') }}
  no ip redirects
  no ip unreachables
  no ip proxy-arpa
  standby {% for vlan in intf.tagged_vlans %}{{ vlan.vid }}{% if not loop.last %}, {% endif %}{% endfor %} priority {{ device.json.results[0]['vc_priority'] }}
  standby {% for vlan in intf.tagged_vlans %}{{ vlan.vid }}{% if not loop.last %}, {% endif %}{% endfor %} preempt delay minimum 70
  standby {% for vlan in intf.tagged_vlans %}{{ vlan.vid }}{% if not loop.last %}, {% endif %}{% endfor %} authentication md5 key-chain hsrpREN
  mpls propagate-cos
      {% endif %}
    {% endfor %}
  no shutdown
!
{% endif %}
{% endfor %}
!
!
{% for intf in interfaces.json.results %}
{% if 'GigabitEthernet' in intf["name"] and not 'Ten' in intf["name"]  %}
interface {{ intf.name }}
  {% if intf.description %}
  description {{ intf.description }}
  {% endif %}
  no ip address
  load-interval 30
  negotiation auto
  cdp enable
  mpls propagate-cos
  service instance trunk 1 ethernet
   encapsulation dot1q {% for vlan in intf.tagged_vlans %}{{ vlan.vid }}{% if not loop.last %}, {% endif %}{% endfor %}
   rewrite ingress tag pop 1 symmetric
   l2protocol peer stp
  bridge-domain from-encapsulation
 !
 service instance 1024 ethernet
  encapsulation untagged
  l2protocol peer cdp stp udld
  bridge-domain 1024
 !
!
  {% endif %}
{% endfor %}
!
!
!
{% for intf in interfaces.json.results %}
{% if 'Ten' in intf["name"] %}
interface {{ intf.name }}
  {% if intf.description %}
  description {{ intf.description }}
  mtu {{ intf.mtu }}
  {% endif %}
    {% for ip in ip_addresses.json.results %}
      {% if ip.assigned_object.name == intf.name %}
  ip address {{ ip.address.split('/')[0] }} {{ ip.address | ansible.utils.ipaddr('netmask') }}
  ip ospf authentication message-digest
  ip ospf message-digest-key 1 md5 7 105C1A0A5718011B0A
  ip ospf network point-to-point
  ip ospf cost 500
  load-interval 30
  cdp enable
  mpls propagate-cos
  mpls ip
  service-policy output SHAPE_48
      {% endif %}
    {% endfor %}
  no shutdown
!
{% endif %}
{% endfor %}
!
!
router ospf 100
{% for addr in ip_addresses.json.results %}
{% if 'Loopback 1' in addr.assigned_object["display"] and addr.assigned_object["name"] == addr.assigned_object["display"] %}
router-id {{ addr.address.split('/')[0] }}
{% endif %}
{% endfor %}
 auto-cost reference-bandwidth 10000
 area {{ site.json.results[0]['custom_fields']['OSPF_AREA_ID'] }} authentication message-digest
 redistribute connected subnets
 passive-interface Loopback1
 {% for addr in ip_addresses.json.results %}
  {% for intf in interfaces.json.results if intf['custom_fields']['RUN_OSPF']|lower == "on"  %}
 network {{ addr.address.split('/')[0] }} 0.0.0.0 area {{ site.json.results[0]['custom_fields']['OSPF_AREA_ID'] }}
  {% endfor %}
 {% endfor %}
 mpls ldp sync
!
!
router bgp {{ site.json.results[0]['asns'][0]['asn'] }}
 bgp log-neighbor-changes
 redistribute connected
 neighbor Route_Reflector peer-group
 neighbor Route_Reflector remote-as 65000
 neighbor Route_Reflector update-source Loopback0
 neighbor Route_Reflector timers 20 60
 neighbor 10.0.0.1 peer-group Route_Reflector
 neighbor 10.0.0.1 transport path-mtu-discovery
 neighbor 10.0.0.2 peer-group Route_Reflector
 neighbor 10.0.0.2 transport path-mtu-discovery
 neighbor 10.0.0.204 peer-group Route_Reflector
 neighbor 10.0.0.204 transport path-mtu-discovery
 !
 address-family vpnv4
  bgp scan-time 5
  neighbor Route_Reflector send-community both
  neighbor 10.0.0.1 activate
  neighbor 10.0.0.2 activate
  neighbor 10.0.0.204 activate
 exit-address-family
 !
 {% for vrf in vrfs.json.results %}
 address-family ipv4 vrf {{ vrf.name }}
  redistribute connected route-map Set_Local_preference
  redistribute static route-map Set_Local_preference
 exit-address-family
!
{% endfor %}

!
!
!
!
!
logging source-interface GigabitEthernet0
!
line con 0
 logging synchronous
 stopbits 1
line aux 0
 stopbits 1
!
!
end

